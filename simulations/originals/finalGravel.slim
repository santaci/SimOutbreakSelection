initialize() {
	initializeTreeSeq();
	initializeMutationRate(0);
	initializeMutationType("m1", 0.5, "f", 0.0);
	initializeGenomicElementType("g1", m1, 1.0);
	m1.convertToSubstitution=T;
	initializeGenomicElement(g1, 0, 51304565);
	
	//Read HapMap genetic map for chr22
	lines = readFile("/home/users/cindy/genetic_map_GRCh37_chr22.txt");
	rates = NULL;
	ends = NULL;
	for (line in lines)
	{
		components = strsplit(line, "\t");
		if (components[0]=="Chromosome")
			next;
		ends = c(ends, asInteger(components[1]));
		rates = c(rates, asFloat(components[2]));
	}
	ends = c(ends[1:(size(ends)-1)] - 2, 51304565);
	rates = rates * 1e-8;
	initializeRecombinationRate(rates, ends);
}

// Create the ancestral African population
1 { sim.addSubpop("p1", 7310); 
// save this run's identifier, used to save and restore
defineConstant("simID", getSeed());
}

// Expand the African population to 14474
// This occurs 148000 years (5920) generations ago
52080 { p1.setSubpopulationSize(14474); }

// Split non-Africans from Africans and set up migration between them
// This occurs 51000 years (2040 generations) ago
55960 {
	sim.addSubpopSplit("p2", 1861, p1);
	p1.setMigrationRates(c(p2), c(15e-5));
	p2.setMigrationRates(c(p1), c(15e-5));
}

// Split p2 into European and East Asian subpopulations
// This occurs 23000 years (920 generations) ago
57080 {
	sim.addSubpopSplit("p3", 554, p2);
	p2.setSubpopulationSize(1032);  // reduce European size
	
	// Set migration rates for the rest of the simulation
	p1.setMigrationRates(c(p2, p3), c(2.5e-5, 0.78e-5));
	p2.setMigrationRates(c(p1, p3), c(2.5e-5, 3.11e-5));
	p3.setMigrationRates(c(p1, p2), c(0.78e-5, 3.11e-5));
//	sim.chromosome.setMutationRate(2.36e-10);
}

55960 late() {
// save the state of the simulation
	sim.outputFull("/home/users/cindy/tmp/slim_" + simID + ".txt");
	
	// introduce the sweep mutation
	target = sample(p2.genomes, 1);
	target.addNewDrawnMutation(m1, 2000000);
}

57999: late() {
	mut = sim.mutationsOfType(m1);
	
	if (size(mut) == 1)
	{
		if (sim.mutationFrequencies(NULL, mut) >= 0.1 & sim.mutationFrequencies(NULL, mut) < 0.3)
		{
			cat(simID + ": ESTABLISHED - KEEP MUTATION\n");
			catn("Frequency: " + sim.mutationFrequencies(p2));
			mut.setSelectionCoeff(0.0);
			sim.deregisterScriptBlock(self);
		}
	}
	else
	{
		cat(simID + ": LOST BEFORE ESTABLISHMENT - RESTARTING\n");
		catn("Frequency: " + sim.mutationFrequencies(p2));
		
		// go back to generation 57080
		sim.readFromPopulationFile("/home/users/cindy/tmp/slim_" + simID + ".txt");
		
		// start a newly seeded run
		setSeed(rdunif(1, 0, asInteger(2^62) - 1));
		
		// re-introduce the sweep mutation
		target = sample(p2.genomes, 1);
		target.addNewDrawnMutation(m1, 2000000);
	}
}


// Set up exponential growth in Europe and East Asia
// Where N(0) is the base subpopulation size and t = gen - 57080:
//    N(Europe) should be int(round(N(0) * e^(0.0038*t)))
//    N(East Asia) should be int(round(N(0) * e^(0.0048*t)))
57080:58000 {
	t = sim.generation - 57080;
	p2_size = round(1032 * exp(0.0038 * t));
	p3_size = round(554 * exp(0.0048 * t));
	
	p2.setSubpopulationSize(asInteger(p2_size));
	p3.setSubpopulationSize(asInteger(p3_size));
}

58000 {
p1.setSubpopulationSize(0);
p3.setSubpopulationSize(0);
}

// Generation 58000 is the present.  Output and terminate.
58000 late() {
	sim.treeSeqOutput("/home/users/cindy/data/Gravel/finalGravel_" + simID + ".trees");	

// Remove migration matrix tables
//	p1.setMigrationRates(c(p2, p3), c(0,0));
//	p2.setMigrationRates(c(p1, p3), c(0,0));
//	p3.setMigrationRates(c(p1, p2), c(0,0));
//	

// THIS CAUSES ISSUES IN MSPRIME FOR DOWNSTREAM ANALYSIS
// Target here are all mutations we want to delete
//	muts = sim.mutationsOfType(m1);
//	target=sample(sim.mutations,size(muts)-50);
//	sim.subpopulations.genomes.removeMutations(target);
	
	//p1.outputSample(216); // YRI phase 3 sample of size 108
	//p2.outputSample(198); // CEU phase 3 sample of size 99
	//p3.outputSample(206); // CHB phase 3 sample of size 103
}

// Remove neutral mutations in the haploid genomes that have fixed
//late() {
//	muts = sim.mutationsOfType(m1);
//	freqs = sim.mutationFrequencies(NULL, muts);
//	if (any(freqs > 0.2))
//		sim.subpopulations.genomes.removeMutations(muts[freqs > 0.2], F);
//}
