import os
import yaml
import subprocess

SLIM="/home/lnd775/apps/software/SLiM-3.3.1/build/slim"
EPISELECT="episelect.py"
GETTOP="scripts/get_top.R"
OUTMAIN = config["OUTMAIN"]


def num_sims():
    sims = config["sim"]
    sim = list(range(1,sims+1,1))
    sim = [str(x) for x in sim]
    return sim

def num_resamp():
    resamps = config["resamp"]
    resamp = list(range(1,resamps+1,1))
    resamp = [str(x) for x in resamp]
    return resamp

sim=num_sims()
resamp=num_resamp()

rule get_selected:
    input:
        "demographies/buffalo_doubleAF_{sim}.txt"
    output:
        sel = os.path.join(OUTMAIN,"{model}_{recovery}_s{s}_f{f}_sim{sim}","selected.txt"),
        deme = os.path.join(OUTMAIN,"{model}_{recovery}_s{s}_f{f}_sim{sim}","deme.txt"),
    shell:
        """
        tail -n 1 {input} | grep 'Frequency' | tr -s 'Frequency:' '\\n' | tr 'at' '\\t' | awk ' $1 >= {wildcards.f} && $1 <= {wildcards.f}+0.005 {{print$ 0}}' | head -n 1 | awk '{{print $2}}' > {output.sel}
        head -n 2 {input} | tail -n 1  > {output.deme}
        """
# Rule for dry running the epidemic simulation in SLiM to check seed
rule dry_slim_epidemic:
    input:
        nonwf = "scripts/buffalo_{model}_{recovery}_it.slim",
        varpos = os.path.join(OUTMAIN,"{model}_{recovery}_s{s}_f{f}_sim{sim}","selected.txt"),
        deme = os.path.join(OUTMAIN,"{model}_{recovery}_s{s}_f{f}_sim{sim}","deme.txt"),
    output:
        os.path.join(OUTMAIN,"{model}_{recovery}_s{s}_f{f}_sim{sim}","seed.txt"),
    params:
        fithom = 0.8,
    shell:
        """
        selected=$(cat {input.varpos});
        deme=$(cat {input.deme});
        {SLIM} -s {wildcards.sim} -d deme=$deme -d pres={wildcards.s} -d fithom={params.fithom} -d selected=$selected -d "directory='{OUTMAIN}/{wildcards.model}_{wildcards.recovery}_s{wildcards.s}_f{wildcards.f}_sim{wildcards.sim}'" -d I={wildcards.sim} {input.nonwf};
        """

rule run_slim_epidemic:
    input:
        nonwf = "scripts/buffalo_{model}_{recovery}.slim",
        varpos = os.path.join(OUTMAIN,"{model}_{recovery}_s{s}_f{f}_sim{sim}","selected.txt"),
        deme = os.path.join(OUTMAIN,"{model}_{recovery}_s{s}_f{f}_sim{sim}","deme.txt"),
        newseed = os.path.join(OUTMAIN,"{model}_{recovery}_s{s}_f{f}_sim{sim}","seed.txt"),
    output:
        os.path.join(OUTMAIN,"{model}_{recovery}_s{s}_f{f}_sim{sim}","{model}_{recovery}_s{s}_f{f}_sim{sim}.out"),
        os.path.join(OUTMAIN,"{model}_{recovery}_s{s}_f{f}_sim{sim}","{model}_{recovery}_{sim}.trees"),
    params:
        fithom = 0.8,
    log:
        os.path.join(OUTMAIN,"logs","{model}_{recovery}_s{s}_f{f}_sim{sim}.out"),
    shell:
        """
        selected=$(cat {input.varpos});
        deme=$(cat {input.deme});
        newseed=$(cat {input.newseed});
        {SLIM} -s $newseed -d deme=$deme -d pres={wildcards.s} -d fithom={params.fithom} -d selected=$selected -d "directory='{OUTMAIN}/{wildcards.model}_{wildcards.recovery}_s{wildcards.s}_f{wildcards.f}_sim{wildcards.sim}'" -d I={wildcards.sim} {input.nonwf} > {output[0]}
        """
if config["dead"]:
    rule run_episelect:
        input:
            tree = os.path.join(OUTMAIN,"{model}_{recovery}_s{s}_f{f}_sim{sim}","{model}_{recovery}_{sim}.trees"),
            varpos = os.path.join(OUTMAIN,"{model}_{recovery}_s{s}_f{f}_sim{sim}","selected.txt")
        output:
            os.path.join(OUTMAIN, "{model}_{recovery}_s{s}_f{f}_sim{sim}","n{n}","{resamp}", "{gen1}_{gen2}", "FST_LD_{gen1}_{gen2}_{n}.png"),
            os.path.join(OUTMAIN, "{model}_{recovery}_s{s}_f{f}_sim{sim}","n{n}","{resamp}", "{gen1}_{gen2}", "SFS_LD_{gen1}_{gen2}_{n}.png"),
            os.path.join(OUTMAIN, "{model}_{recovery}_s{s}_f{f}_sim{sim}","n{n}","{resamp}", "{gen1}_{gen2}", "SFS_{gen1}_{gen2}_{n}.png"),
            os.path.join(OUTMAIN,"{model}_{recovery}_s{s}_f{f}_sim{sim}","n{n}","{resamp}","{gen1}_{gen2}", "nonWF_{n}_{gen1}_{gen2}_FST.out.gz"),
            os.path.join(OUTMAIN,"{model}_{recovery}_s{s}_f{f}_sim{sim}","n{n}","{resamp}","{gen1}_{gen2}", "nonWF_{n}_gwas_{gen1}_{gen2}_add.assoc.out.gz"),
        params:
            dead = config["dead"],
        run:
            if config["dead"]:
                shell("selected=$(cat {input.varpos}) && cd {OUTMAIN}/{wildcards.model}_{wildcards.recovery}_s{wildcards.s}_f{wildcards.f}_sim{wildcards.sim}/n{wildcards.n}/{wildcards.resamp}/{wildcards.gen1}_{wildcards.gen2}/ && python3 {EPISELECT} --nosel --seed {wildcards.resamp} --tree {input.tree} --muTree {OUTMAIN}/{wildcards.model}_{wildcards.recovery}_s{wildcards.s}_f{wildcards.f}_sim{wildcards.sim}/{wildcards.model}_{wildcards.recovery}_{wildcards.sim}_mu.trees --select ${{selected}} --bottle 40002 --dead {params.dead} --putparents {OUTMAIN}/{wildcards.model}_{wildcards.recovery}_s{wildcards.s}_f{wildcards.f}_sim{wildcards.sim}/nwf_putparents_{wildcards.sim}.csv --sampling {wildcards.n} --vcf --gwas --ihs --plots --pmap --generations {wildcards.gen1} {wildcards.gen2} --ne 100000 --mu 1.5e-8 --rec 1e-8 --demegen 40000")
            else:
                shell("selected=$(cat {input.varpos}) && cd {OUTMAIN}/{wildcards.model}_{wildcards.recovery}_s{wildcards.s}_f{wildcards.f}_sim{wildcards.sim}/n{wildcards.n}/{wildcards.resamp}/{wildcards.gen1}_{wildcards.gen2}/ && python3 {EPISELECT} --nosel --seed {wildcards.resamp} --tree {input.tree} --muTree {OUTMAIN}/{wildcards.model}_{wildcards.recovery}_s{wildcards.s}_f{wildcards.f}_sim{wildcards.sim}/{wildcards.model}_{wildcards.recovery}_{wildcards.sim}_mu.trees --select ${{selected}} --bottle 40002 --putparents {OUTMAIN}/{wildcards.model}_{wildcards.recovery}_s{wildcards.s}_f{wildcards.f}_sim{wildcards.sim}/nwf_putparents_{wildcards.sim}.csv --sampling {wildcards.n} --plots --generations {wildcards.gen1} {wildcards.gen2} --vcf --ihs --pmap --ne 100000 --mu 1.5e-8 --rec 1e-8 --demegen 40000")
else:
    rule run_episelect:
        input:
            tree = os.path.join(OUTMAIN,"{model}_{recovery}_s{s}_f{f}_sim{sim}","{model}_{recovery}_{sim}.trees"),
            varpos = os.path.join(OUTMAIN,"{model}_{recovery}_s{s}_f{f}_sim{sim}","selected.txt")
        output:
            os.path.join(OUTMAIN, "{model}_{recovery}_s{s}_f{f}_sim{sim}","n{n}","{resamp}", "{gen1}_{gen2}", "FST_LD_{gen1}_{gen2}_{n}.png"),
            os.path.join(OUTMAIN, "{model}_{recovery}_s{s}_f{f}_sim{sim}","n{n}","{resamp}", "{gen1}_{gen2}", "SFS_LD_{gen1}_{gen2}_{n}.png"),
            os.path.join(OUTMAIN, "{model}_{recovery}_s{s}_f{f}_sim{sim}","n{n}","{resamp}", "{gen1}_{gen2}", "SFS_{gen1}_{gen2}_{n}.png"),
            os.path.join(OUTMAIN,"{model}_{recovery}_s{s}_f{f}_sim{sim}","n{n}","{resamp}","{gen1}_{gen2}", "nonWF_{n}_{gen1}_{gen2}_FST.out.gz")
        params:
            dead = config["dead"],
        run:
            if config["dead"]:
                shell("selected=$(cat {input.varpos}) && cd {OUTMAIN}/{wildcards.model}_{wildcards.recovery}_s{wildcards.s}_f{wildcards.f}_sim{wildcards.sim}/n{wildcards.n}/{wildcards.resamp}/{wildcards.gen1}_{wildcards.gen2}/ && python3 {EPISELECT} --nosel --seed {wildcards.resamp} --tree {input.tree} --muTree {OUTMAIN}/{wildcards.model}_{wildcards.recovery}_s{wildcards.s}_f{wildcards.f}_sim{wildcards.sim}/{wildcards.model}_{wildcards.recovery}_{wildcards.sim}_mu.trees --select ${{selected}} --bottle 40002 --dead {params.dead} --putparents {OUTMAIN}/{wildcards.model}_{wildcards.recovery}_s{wildcards.s}_f{wildcards.f}_sim{wildcards.sim}/nwf_putparents_{wildcards.sim}.csv --sampling {wildcards.n} --vcf --gwas --ihs --plots --pmap --generations {wildcards.gen1} {wildcards.gen2} --ne 100000 --mu 1.5e-8 --rec 1e-8 --demegen 40000")
            else:
                shell("selected=$(cat {input.varpos}) && cd {OUTMAIN}/{wildcards.model}_{wildcards.recovery}_s{wildcards.s}_f{wildcards.f}_sim{wildcards.sim}/n{wildcards.n}/{wildcards.resamp}/{wildcards.gen1}_{wildcards.gen2}/ && python3 {EPISELECT} --nosel --seed {wildcards.resamp} --tree {input.tree} --muTree {OUTMAIN}/{wildcards.model}_{wildcards.recovery}_s{wildcards.s}_f{wildcards.f}_sim{wildcards.sim}/{wildcards.model}_{wildcards.recovery}_{wildcards.sim}_mu.trees --select ${{selected}} --bottle 40002 --putparents {OUTMAIN}/{wildcards.model}_{wildcards.recovery}_s{wildcards.s}_f{wildcards.f}_sim{wildcards.sim}/nwf_putparents_{wildcards.sim}.csv --sampling {wildcards.n} --plots --generations {wildcards.gen1} {wildcards.gen2} --vcf --ihs --pmap --ne 100000 --mu 1.5e-8 --rec 1e-8 --demegen 40000")

if config["dead"]:
    rule run_analyses:
        input:
            gwas = os.path.join(OUTMAIN,"{model}_{recovery}_s{s}_f{f}_sim{sim}","n{n}","{resamp}","{gen1}_{gen2}", "nonWF_{n}_gwas_{gen1}_{gen2}_add.assoc.out.gz"),
            fst = os.path.join(OUTMAIN,"{model}_{recovery}_s{s}_f{f}_sim{sim}","n{n}","{resamp}","{gen1}_{gen2}", "nonWF_{n}_{gen1}_{gen2}_FST.out.gz"),
            varpos = os.path.join(OUTMAIN,"{model}_{recovery}_s{s}_f{f}_sim{sim}","selected.txt")
        output:
            os.path.join(OUTMAIN, "{model}_{recovery}_s{s}_f{f}_sim{sim}","n{n}","{resamp}","{gen1}_{gen2}", "df_fst_{gen1}_{gen2}.png"),
            os.path.join(OUTMAIN, "{model}_{recovery}_s{s}_f{f}_sim{sim}","n{n}","{resamp}", "{gen1}_{gen2}", "df_gwas_{gen1}_{gen2}.png"),
        params:
            midchrom = config["midchrom"],
            chrom = config["chrom"],
        shell:
            """
            selected=$(cat {input.varpos});
            if [[ $selected -ge {params.midchrom} ]]; then
                selected=$(echo $selected-{params.midchrom} | bc -l)
                selected="chr{params.chrom[1]}_"$selected
            else
                selected="chr{params.chrom[0]}_"$selected
            fi
            echo $selected;
            Rscript {GETTOP} {OUTMAIN}/{wildcards.model}_{wildcards.recovery}_s{wildcards.s}_f{wildcards.f}_sim{wildcards.sim}/n{wildcards.n}/{wildcards.resamp}/{wildcards.gen1}_{wildcards.gen2} {input.gwas} gwas $selected {wildcards.gen1} {wildcards.gen2}
            Rscript {GETTOP} {OUTMAIN}/{wildcards.model}_{wildcards.recovery}_s{wildcards.s}_f{wildcards.f}_sim{wildcards.sim}/n{wildcards.n}/{wildcards.resamp}/{wildcards.gen1}_{wildcards.gen2} {input.fst} fst $selected {wildcards.gen1} {wildcards.gen2}
            Rscript {GETTOP} {OUTMAIN}/{wildcards.model}_{wildcards.recovery}_s{wildcards.s}_f{wildcards.f}_sim{wildcards.sim}/n{wildcards.n}/{wildcards.resamp}/{wildcards.gen1}_{wildcards.gen2} {input.fst} jsfs $selected {wildcards.gen1} {wildcards.gen2}
            """
else:
    rule run_analyses:
        input:
            fst = os.path.join(OUTMAIN,"{model}_{recovery}_s{s}_f{f}_sim{sim}","n{n}","{resamp}","{gen1}_{gen2}", "nonWF_{n}_{gen1}_{gen2}_FST.out.gz"),
            varpos = os.path.join(OUTMAIN,"{model}_{recovery}_s{s}_f{f}_sim{sim}","selected.txt")
        output:
            os.path.join(OUTMAIN, "{model}_{recovery}_s{s}_f{f}_sim{sim}","n{n}","{resamp}","{gen1}_{gen2}", "df_fst_{gen1}_{gen2}.png"),
            os.path.join(OUTMAIN, "{model}_{recovery}_s{s}_f{f}_sim{sim}","n{n}","{resamp}", "{gen1}_{gen2}", "df_jsfs_{gen1}_{gen2}.png"),
        params:
            midchrom = config["midchrom"],
            chrom = config["chrom"],
        shell:
            """
            selected=$(cat {input.varpos});
            if [[ $selected -ge {params.midchrom} ]]; then
                selected=$(echo $selected-{params.midchrom} | bc -l)
                selected="chr{params.chrom[1]}_"$selected
            else
                selected="chr{params.chrom[0]}_"$selected
            fi
            echo $selected;
            Rscript {GETTOP} {OUTMAIN}/{wildcards.model}_{wildcards.recovery}_s{wildcards.s}_f{wildcards.f}_sim{wildcards.sim}/n{wildcards.n}/{wildcards.resamp}/{wildcards.gen1}_{wildcards.gen2} {input.fst} fst $selected {wildcards.gen1} {wildcards.gen2}
            Rscript {GETTOP} {OUTMAIN}/{wildcards.model}_{wildcards.recovery}_s{wildcards.s}_f{wildcards.f}_sim{wildcards.sim}/n{wildcards.n}/{wildcards.resamp}/{wildcards.gen1}_{wildcards.gen2} {input.fst} jsfs $selected {wildcards.gen1} {wildcards.gen2}
            """

rule all:
    input:
        expand(os.path.join(OUTMAIN, "{model}_{recovery}_s{s}_f{f}_sim{sim}","n{n}","{resamp}", "{gen1}_{gen2}", "SFS_{gen1}_{gen2}_{n}.png"), model=config["model"], recovery=config["recovery"], s=config["s"], f=config["f"], sim=num_sims(), n=config["n"], resamp=num_resamp(), gen1=config["gen1"],gen2=config["gen2"]),
        expand(os.path.join(OUTMAIN, "{model}_{recovery}_s{s}_f{f}_sim{sim}","n{n}","{resamp}", "{gen1}_{gen2}", "df_fst_{gen1}_{gen2}.png"), model=config["model"], recovery=config["recovery"], s=config["s"], f=config["f"], sim=num_sims(), n=config["n"], resamp=num_resamp(), gen1=config["gen1"],gen2=config["gen2"])
